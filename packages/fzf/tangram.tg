import * as go from "tg:go" with { path: "../go" };
import * as std from "tg:std" with { path: "../std" };

export let metadata = {
	name: "fzf",
	version: "0.35.0",
};

export let source = tg.target((): Promise<tg.Directory> => {
	let { name, version } = metadata;
	let checksum =
		"sha256:645cf0e1521d5c518f99acdca841a8113a2f0f5d785cb4147b92fcfa257a1ad0";

	return std.download.fromGithub({
		checksum,
		owner: "junegunn",
		repo: name,
		tag: version,
		version,
	});
});

export type Arg = {
	build?: std.Triple.Arg;
	env?: std.env.Arg;
	go?: tg.MaybeNestedArray<go.Arg>;
	host?: std.Triple.Arg;
	sdk?: tg.MaybeNestedArray<std.sdk.Arg>;
	source?: tg.Directory;
};

export let fzf = tg.target(async (arg?: Arg) => {
	let { go: goArg = [], build, host, source: source_, ...rest } = arg ?? {};

	return go.build(
		{
			...rest,
			...std.Triple.rotate({ build, host }),
			source: source_ ?? source(),
		},
		goArg,
	);
});

export let test = tg.target(() => {
	return std.build(
		`
		echo "Checking that we can run fzf." | tee $OUTPUT
		fzf --version | tee -a $OUTPUT
	`,
		{ env: fzf() },
	);
});

export default fzf;
