diff --git a/configure.ac b/configure.ac
index 3a36f42..fc53a55 100644
--- a/configure.ac
+++ b/configure.ac
@@ -319,6 +319,16 @@ if test "x${have_libxml2}" = "x0" ; then
   AC_MSG_ERROR([Cannot build without libxml2])
 fi
 
+dnl
+dnl Configure libcrypto (part of OpenSSL).
+dnl
+have_libcrypto="1"
+AC_CHECK_HEADERS([openssl/evp.h], , [have_libcrypto="0"])
+AC_CHECK_LIB([crypto], [OPENSSL_init_crypto], , [have_libcrypto="0"])
+if test "x${have_libcrypto}" = "x0" ; then
+  AC_MSG_ERROR([Cannot build withotu libcrypto (OpenSSL)])
+fi
+
 dnl 
 dnl Configure libz.
 dnl 
diff --git a/include/xar.h.in b/include/xar.h.in
index 054b742..77f0cad 100644
--- a/include/xar.h.in
+++ b/include/xar.h.in
@@ -49,6 +49,9 @@ extern "C" {
 #include <sys/stat.h>
 
 #ifdef __APPLE__
+#include <AvailabilityMacros.h>
+#endif
+#if defined(__APPLE__) && MAC_OS_X_VERSION_MAX_ALLOWED >= 101200
 #import <os/availability.h>
 #else
 #define API_DEPRECATED(...)
diff --git a/lib/archive.h b/lib/archive.h
index f926245..c1096b2 100644
--- a/lib/archive.h
+++ b/lib/archive.h
@@ -40,12 +40,12 @@
 #define _XAR_ARCHIVE_H_
 #include <zlib.h>
 #include <libxml/hash.h>
-#ifdef __APPLE__
+/* #ifdef __APPLE__
 #include <CommonCrypto/CommonDigest.h>
 #include <CommonCrypto/CommonDigestSPI.h>
-#else
+#else */
 #include <openssl/evp.h>
-#endif
+/* #endif */
 #include <sys/types.h>
 #include <sys/stat.h>
 #include "xar.h"
diff --git a/lib/filetree.c b/lib/filetree.c
index f31682a..6de7bdf 100644
--- a/lib/filetree.c
+++ b/lib/filetree.c
@@ -46,6 +46,7 @@
 #include <libxml/xmlwriter.h>
 #include <libxml/xmlreader.h>
 #include <libxml/xmlstring.h>
+#include <libxml/encoding.h>
 
 #ifndef HAVE_ASPRINTF
 #include "asprintf.h"
@@ -752,7 +753,8 @@ int xar_file_equals_file(xar_file_t f1, xar_file_t f2)
 	size_t fspath1_size = 0, fspath2_size = 0;
 	size_t ns1_size = 0, ns2_size = 0;
 	const struct __xar_file_t * child1 = NULL, * child2 = NULL;
-	const uint keys_to_ignore_count = 1;
+	// const uint keys_to_ignore_count = 1;
+	#define keys_to_ignore_count 1
 	char * keys_to_ignore[keys_to_ignore_count] = { "id" }; // ID is allowed ot mismatch
 	
 	// If the two pointers match, call it the same.
diff --git a/lib/hash.c b/lib/hash.c
index 66876ad..6e055da 100644
--- a/lib/hash.c
+++ b/lib/hash.c
@@ -41,12 +41,14 @@
 #include <string.h>
 #include <sys/types.h>
 #include <zlib.h>
+/*
 #ifdef __APPLE__
 #include <CommonCrypto/CommonDigest.h>
 #include <CommonCrypto/CommonDigestSPI.h>
 #else
+*/
 #include <openssl/evp.h>
-#endif
+/* #endif */
 
 #include "xar.h"
 #include "hash.h"
@@ -57,7 +59,7 @@
 
 
 #pragma mark Hash Wrapper Object
-
+/*
 #ifdef __APPLE__
 
 CCDigestRef digestRef_from_name(const char* name, unsigned int *outHashSize) {
@@ -89,17 +91,19 @@ CCDigestRef digestRef_from_name(const char* name, unsigned int *outHashSize) {
     return result;
 }
 #endif // __APPLE__
-
+*/
 
 struct __xar_hash_t {
 	const char *digest_name;
 	void *context;
+/*
 #ifdef __APPLE__
 	CCDigestRef digest;
 #else
-	EVP_MD_CTX digest;
+*/
+	EVP_MD_CTX *digest;
 	const EVP_MD *type;
-#endif
+/* #endif */
 	unsigned int length;
 };
 
@@ -112,14 +116,16 @@ xar_hash_t xar_hash_new(const char *digest_name, void *context) {
 	
 	if( context )
 		HASH_CTX(hash)->context = context;
-	
+/*	
 #ifdef __APPLE__
 	HASH_CTX(hash)->digest = digestRef_from_name(digest_name, &HASH_CTX(hash)->length);
 #else
+*/
 	OpenSSL_add_all_digests();
 	HASH_CTX(hash)->type = EVP_get_digestbyname(digest_name);
-	EVP_DigestInit(&HASH_CTX(hash)->digest, HASH_CTX(hash)->type);
-#endif
+	HASH_CTX(hash)->digest = EVP_MD_CTX_create();
+	EVP_DigestInit(HASH_CTX(hash)->digest, HASH_CTX(hash)->type);
+/* #endif */
 	
 	HASH_CTX(hash)->digest_name = strdup(digest_name);
 	
@@ -135,28 +141,34 @@ const char *xar_hash_get_digest_name(xar_hash_t hash) {
 }
 
 void xar_hash_update(xar_hash_t hash, void *buffer, size_t nbyte) {
+/*
 #ifdef __APPLE__
 	CCDigestUpdate(HASH_CTX(hash)->digest, buffer, nbyte);
 #else
-	EVP_DigestUpdate(&HASH_CTX(hash)->digest, buffer, nbyte);
-#endif
+*/
+	EVP_DigestUpdate(HASH_CTX(hash)->digest, buffer, nbyte);
+/* #endif */
 }
 
 void *xar_hash_finish(xar_hash_t hash, size_t *nbyte) {
+/*
 #ifdef __APPLE__
 	void *buffer = calloc(1, CC_SHA512_DIGEST_LENGTH); // current biggest digest size  This is what OpenSSL uses
 #else
+*/
 	void *buffer = calloc(1, EVP_MAX_MD_SIZE);
-#endif
+/* #endif */
 	if( ! buffer )
 		return NULL;
-	
+/*	
 #ifdef __APPLE__
 	CCDigestFinal(HASH_CTX(hash)->digest, buffer);
 	CCDigestDestroy(HASH_CTX(hash)->digest);
 #else
-	EVP_DigestFinal(&HASH_CTX(hash)->digest, buffer, &HASH_CTX(hash)->length);
-#endif
+*/
+	EVP_DigestFinal(HASH_CTX(hash)->digest, buffer, &HASH_CTX(hash)->length);
+	EVP_MD_CTX_destroy(HASH_CTX(hash)->digest);
+/* #endif */
 	
 	*nbyte = HASH_CTX(hash)->length;
 	free((void *)HASH_CTX(hash)->digest_name);
diff --git a/lib/linuxattr.c b/lib/linuxattr.c
index 0fec2bb..58ee6a8 100644
--- a/lib/linuxattr.c
+++ b/lib/linuxattr.c
@@ -226,7 +226,7 @@ int32_t xar_linuxattr_extract(xar_t x, xar_file_t f, const char* file, char *buf
 	if( statfs(file, &sfs) != 0 ) {
 		char *tmp, *bname;
 		tmp = strdup(file);
-		bname = safe_dirname(tmp);
+		bname = xar_safe_dirname(tmp);
 		statfs(bname, &sfs);
 		free(tmp);
 		free(bname);
diff --git a/src/xar.c b/src/xar.c
index 9977e8a..4e01f4d 100644
--- a/src/xar.c
+++ b/src/xar.c
@@ -51,7 +51,7 @@
 #include <time.h>
 #include "xar_internal.h"
 #include "config.h"
-#include "filetree.h"
+#include "../lib/filetree.h"
 #include "util.h"
 #define SYMBOLIC 1
 #define NUMERIC  2
