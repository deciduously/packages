/** This package takes a bootstrap C/C++ compiler and some utilities and canadian-crosses up a sizzling plate of farm-fresh GCC. The output of this package can then be used to build other compilers like LLVM. */

import * as std from "../tangram.tg";
import * as stage0 from "./canadian_cross/stage0.tg";
import * as stage1 from "./canadian_cross/stage1.tg";
import * as stage2 from "./canadian_cross/stage2.tg";
import * as dependencies from "./dependencies.tg";

export * as stage0 from "./canadian_cross/stage0.tg";
export * as stage1 from "./canadian_cross/stage1.tg";
export * as stage2 from "./canadian_cross/stage2.tg";

export let toolchain = tg.target(async (arg?: std.Triple.HostArg) => {
	// Resolve arguments.
	let host = await std.Triple.host(arg);

	let sdk = { bootstrapMode: true };

	// Ensure the dependencies are built.
	await dependencies.env({ host, sdk });

	// Stage 1: Produce build -> host cross-compiler.
	let { env, sysroot } = await stage1.buildToHostCrossToolchain({ host, sdk });

	// Stage 2: Produce host -> target compiler.
	let hostToTargetToolchain = stage2.nativeHostToolchain({
		env,
		host,
		sysroot,
	});

	return hostToTargetToolchain;
});
