import * as std from "tg:std" with { path: "../std" };

export let metadata = {
	name: "bzip2",
	version: "1.0.8",
};

export let source = tg.target(async () => {
	let { name, version } = metadata;
	let checksum =
		"sha256:ab5a03176ee106d3f0fa90e381da478ddae405918153cca248e682cd0c4a2269";
	let unpackFormat = ".tar.gz" as const;
	let url = `https://sourceware.org/pub/${name}/${name}-${version}${unpackFormat}`;
	let artifact = tg.Directory.expect(
		await std.download({
			checksum,
			unpackFormat,
			url,
		}),
	);

	return std.directory.unwrap(artifact);
});

type Arg = {
	autotools?: tg.MaybeNestedArray<std.autotools.Arg>;
	build?: std.Triple.Arg;
	env?: std.env.Arg;
	host?: std.Triple.Arg;
	sdk?: tg.MaybeNestedArray<std.sdk.Arg>;
	source?: tg.Directory;
};

export let bzip2 = tg.target(async (arg?: Arg) => {
	let {
		autotools = [],
		build,
		host: host_,
		source: source_,
		...rest
	} = arg ?? {};
	let host = await std.Triple.host(host_);

	let os = tg.System.os(std.Triple.system(host));
	let sharedObjectExt = os === "darwin" ? "dylib" : "so";

	// Only build the shared library on Linux.
	// TODO: support cross compilation.
	let buildCommand =
		os === "linux"
			? `make CC="cc" -f Makefile-libbz2_so && make clean && make CC="cc"`
			: `make CC="cc \${CFLAGS}"`;

	let postProcess =
		os === "linux"
			? `
				cp -av libbz2.${sharedObjectExt}* $PREFIX/lib
				chmod -R u+w $PREFIX
				cd $PREFIX/lib
				ln -sv libbz2.${sharedObjectExt}.${metadata.version} libbz2.${sharedObjectExt}
			`
			: "";

	let phases = {
		build: {
			command: buildCommand,
		},
		configure: {
			// Patch makefile to install regular symlinks.
			command: "sed -i 's@\\(ln -s -f \\)$(PREFIX)/bin/@\\1@' Makefile",
		},
		install: tg`make CC="cc" install PREFIX="$OUTPUT"`,
		fixup: postProcess,
	};

	return std.autotools.build(
		{
			...rest,
			...std.Triple.rotate({ build, host }),
			source: source_ ?? source(),
			prefixArg: undefined,
			phases,
			host,
		},
		arg?.autotools ?? [],
	);
});

export default bzip2;

export let test = tg.target(() => {
	let source = tg.directory({
		["main.c"]: tg.file(`
			#include <stdio.h>
			int main () {}
		`),
	});

	return std.build(
		tg`
			echo "Checking if we can link against libbzip2."
			cc ${source}/main.c -o $OUTPUT -L${bzip2()}/lib -lbz2
		`,
		{ env: std.sdk() },
	);
});
